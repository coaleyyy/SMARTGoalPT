name: Testing

on:
  push:
    branches:
      - main
  pull_request:
jobs:
  backend-linting:
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install just
        uses: taiki-e/install-action@just
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Get full Python version
        id: full-python-version
        run: echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT
      - name: Install Poetry
        run: |
          python -m pip install pipx
          pipx install poetry
      - name: Configure poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
      - name: Cache poetry venv
        uses: actions/cache@v3
        id: poetry-cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Ensure cache is healthy
        if: steps.poetry-cache.outputs.cache-hit == 'true'
        shell: bash
        run: timeout 10s poetry run pip --version || rm -rf .venv
      - name: Install Dependencies
        run: just install-backend
      - name: Black check
        run: just black-ci
      - name: Lint with ruff
        run: just ruff-ci
      - name: mypy check
        run: just mypy

  backend-testing:
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install just
        uses: taiki-e/install-action@just
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Get full Python version
        id: full-python-version
        run: echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT
      - name: Install Poetry
        run: |
          python -m pip install pipx
          pipx install poetry
      - name: Configure poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
      - name: Cache poetry venv
        uses: actions/cache@v3
        id: poetry-cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Ensure cache is healthy
        if: steps.poetry-cache.outputs.cache-hit == 'true'
        shell: bash
        run: timeout 10s poetry run pip --version || rm -rf .venv
      - name: Install Dependencies
        run: just install-backend
      - name: Test with pytest
        run: just backend-test

  frontend-linting:
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install just
        uses: taiki-e/install-action@just
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      - name: Install Dependencies
        run: just install-frontend
      - name: Lint
        run: just frontend-lint
      - name: Check
        run: just frontend-check

  frontend-testing:
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install just
        uses: taiki-e/install-action@just
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      - name: Install Dependencies
        run: just install-frontend
      - name: Frontend Tests
        run: just frontent-test
